"""


"""

from head import Head

# misc imports.
import sys
import time
import copy
import math
from threading import Thread

# imports for processing IMU data.
from MadgwickAHRS import MadgwickAHRS

# imports for handling IMU.
from ctypes import *
from Phidgets.Phidget import Phidget
from Phidgets.PhidgetException import PhidgetErrorCodes, PhidgetException
from Phidgets.Events.Events import SpatialDataEventArgs, AttachEventArgs
from Phidgets.Events.Events import DetachEventArgs, ErrorEventArgs
from Phidgets.Devices.Spatial import Spatial, SpatialEventData, TimeSpan


class Controller(object):
    """

    """

    head = None
    # stores acceleration gyroscope, magnetic, time.
    imu_measurements = ([], [], [], [])

    class IMU_Handlers(object):
        """

        """

        def on_data(self, e):
            """

            """
            source = e.device
            for index, spatialData in enumerate(e.spatialData):
                if len(spatialData.Acceleration) > 0 and \
                len(spatialData.AngularRate) > 0:
                    acc = [spatialData.Acceleration[0], \
                        spatialData.Acceleration[1], \
                        spatialData.Acceleration[2]]

                    agr = [spatialData.AngularRate[0], \
                        spatialData.AngularRate[1], \
                        spatialData.AngularRate[2]]

                    Controller.imu_measurements[0].append(acc)
                    Controller.imu_measurements[1].append(agr)
                    Controller.imu_measurements[2].append(spatialData.Timestamp.microSeconds)

        def on_attach(self, e):
            """

            """

            return

        def on_detach(self, e):
            """

            """

            return

        def on_error(self, e):
            """

            """

            try:
                source = e.device
                print(("Spatial %i: Phidget Error %i: %s" % \
                    (source.getSerialNum(), e.eCode, e.description)))
            except PhidgetException as e:
                print(("Phidget Exception %i: %s" % (e.code, e.details)))

    def __init__(self, head):
        """

        """

        # head contains reference to object that is updated on every
        # update from the IMU.
        self.head = head

        self.spatial = Spatial()
        imu_handlers = Controller.IMU_Handlers()

        # attach the event handlers.
        try:
            self.spatial.setOnAttachHandler(imu_handlers.on_attach)
            self.spatial.setOnDetachHandler(imu_handlers.on_detach)
            self.spatial.setOnErrorhandler(imu_handlers.on_error)
            self.spatial.setOnSpatialDataHandler(imu_handlers.on_data)

            self.spatial.openPhidget()
            self.spatial.waitForAttach(10000)
            self.spatial.setDataRate(4)
        except:
            print("Error connecting to IMU, I cannot handle this. " + \
            "I will just go die now!")
            exit(1)

        t = Thread(target=self.update_head)
        t.daemon = True
        t.start()

    def process_data(self):
        """

        """

        samplePeriod = 1/256.0

        # number of observations.
        N = len(acc)

        # process the data through the ARHS algorithm which will compute the
        # orientation.

        # contains a rotation matrix corresponding to each of the data points
        rotation_matrices = list()
        ahrs = MahonyAHRS('SamplePeriod', samplePeriod, 'Kp', 1)

    def update_head(self):
        """

        """
        while True:
            if len(Controller.imu_measurements[0]) > 10:
                data = copy.copy(Controller.imu_measurements)

                # NOTE: use locks
                Controller.imu_measurements = ([], [], [])
                self.process_data(data[0], data[1], data[2])



h = Head()
c = Controller(h)

while True:
    time.sleep(1)
    print h
